# generated by patch-package 6.4.10
#
# command:
#   npx patch-package ts-expose-internals
#
# declared package:
#   ts-expose-internals: ^4.9.3
#
diff --git a/node_modules/ts-expose-internals/typescript.d.ts b/node_modules/ts-expose-internals/typescript.d.ts
index 333b0b2..393e6f9 100644
--- a/node_modules/ts-expose-internals/typescript.d.ts
+++ b/node_modules/ts-expose-internals/typescript.d.ts
@@ -12,7 +12,7 @@ MERCHANTABLITY OR NON-INFRINGEMENT.
 See the Apache Version 2.0 License for specific language governing permissions
 and limitations under the License.
 ***************************************************************************** */
-declare module "typescript" {
+declare module "typescript-full" {
     const versionMajorMinor = "4.9";
     /** The version of the TypeScript compiler release */
     const version: string;
@@ -114,7 +114,7 @@ declare module "typescript" {
     const Map: MapConstructor;
     const Set: SetConstructor;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function getIterator<I extends readonly any[] | ReadonlySet<any> | ReadonlyESMap<any, any> | undefined>(iterable: I): Iterator<I extends ReadonlyESMap<infer K, infer V> ? [
         K,
         V
@@ -747,7 +747,7 @@ declare module "typescript" {
      */
     const trimStringStart: (s: string) => string;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum LogLevel {
         Off = 0,
         Error = 1,
@@ -868,7 +868,7 @@ declare module "typescript" {
         function attachDebugPrototypeIfDebug(mapper: TypeMapper): TypeMapper;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Describes a precise semantic version number, https://semver.org
      */
@@ -908,7 +908,7 @@ declare module "typescript" {
         toString(): string;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface PerformanceHooks {
         /** Indicates whether we should write native performance events */
         shouldWriteNativeEvents: boolean;
@@ -946,7 +946,7 @@ declare module "typescript" {
     /** Gets a timestamp with (at least) ms resolution */
     const timestamp: () => number;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace performance {
         interface Timer {
             enter(): void;
@@ -1002,11 +1002,11 @@ declare module "typescript" {
         function disable(): void;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** Performance logger that will generate ETW events if possible - check for `logEvent` member, as `etwModule` will be `{}` when browserified */
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export let tracing: typeof tracingEnabled | undefined;
     namespace tracingEnabled {
         type Mode = "project" | "build" | "server";
@@ -1047,7 +1047,7 @@ declare module "typescript" {
     }
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export type Path = string & {
         __pathBrand: any;
     };
@@ -7571,7 +7571,7 @@ declare module "typescript" {
     }
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * djb2 hashing algorithm
      * http://www.cse.yorku.ca/~oz/hash.html
@@ -7786,7 +7786,7 @@ declare module "typescript" {
     export function setSys(s: System): void;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Internally, we represent paths as strings with '/' as the directory separator.
      * When we make system calls (eg: LanguageServiceHost.getDirectory()),
@@ -8173,7 +8173,7 @@ declare module "typescript" {
     function forEachAncestorDirectory<T>(directory: string, callback: (directory: string) => T | undefined): T | undefined;
     function isNodeModulesDirectory(dirPath: Path): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     const Diagnostics: {
         Unterminated_string_literal: DiagnosticMessage;
         Identifier_expected: DiagnosticMessage;
@@ -10055,7 +10055,7 @@ declare module "typescript" {
         The_value_0_cannot_be_used_here: DiagnosticMessage;
     };
 }
-declare module "typescript" {
+declare module "typescript-full" {
     type ErrorCallback = (message: DiagnosticMessage, length: number) => void;
     function tokenIsIdentifierOrKeyword(token: SyntaxKind): boolean;
     function tokenIsIdentifierOrKeywordOrGreaterThan(token: SyntaxKind): boolean;
@@ -10148,7 +10148,7 @@ declare module "typescript" {
     function createScanner(languageVersion: ScriptTarget, skipTrivia: boolean, languageVariant?: LanguageVariant, textInitial?: string, onError?: ErrorCallback, start?: number, length?: number): Scanner;
     function utf16EncodeAsString(codePoint: number): string;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function isExternalModuleNameRelative(moduleName: string): boolean;
     function sortAndDeduplicateDiagnostics<T extends Diagnostic>(diagnostics: readonly T[]): SortedReadonlyArray<T>;
     function getDefaultLibFileName(options: CompilerOptions): string;
@@ -10550,7 +10550,7 @@ declare module "typescript" {
     function hasRestParameter(s: SignatureDeclaration | JSDocSignature): boolean;
     function isRestParameter(node: ParameterDeclaration | JSDocParameterTag): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export const resolvingEmptyArray: never[];
     export const externalHelpersModuleNameText = "tslib";
     export const defaultMaximumTruncationLength = 160;
@@ -11665,7 +11665,7 @@ declare module "typescript" {
     export function canHaveExportModifier(node: Node): node is Extract<HasModifiers, Statement>;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * A `BaseNodeFactory` is an abstraction over an `ObjectAllocator` that handles caching `Node` constructors
      * and allocating `Node` instances based on a set of predefined types.
@@ -11682,15 +11682,15 @@ declare module "typescript" {
      */
     function createBaseNodeFactory(): BaseNodeFactory;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function createParenthesizerRules(factory: NodeFactory): ParenthesizerRules;
     const nullParenthesizerRules: ParenthesizerRules;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function createNodeConverters(factory: NodeFactory): NodeConverters;
     const nullNodeConverters: NodeConverters;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum NodeFactoryFlags {
         None = 0,
         NoParenthesizerRules = 1,
@@ -11722,7 +11722,7 @@ declare module "typescript" {
     function createSourceMapSource(fileName: string, text: string, skipTrivia?: (pos: number) => number): SourceMapSource;
     function setOriginalNode<T extends Node>(node: T, original: Node | undefined): T;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Associates a node with the current transformation, initializing
      * various transient transformation properties.
@@ -11826,7 +11826,7 @@ declare module "typescript" {
     function setTypeNode<T extends Node>(node: T, type: TypeNode): T;
     function getTypeNode<T extends Node>(node: T): TypeNode | undefined;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface EmitHelperFactory {
         getUnscopedHelperName(name: string): Identifier;
         createDecorateHelper(decoratorExpressions: readonly Expression[], target: Expression, memberName?: Expression, descriptor?: Expression): Expression;
@@ -12001,7 +12001,7 @@ declare module "typescript" {
     const advancedAsyncSuperHelper: EmitHelper;
     function isCallToHelper(firstSegment: Expression, helperName: __String): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function isNumericLiteral(node: Node): node is NumericLiteral;
     function isBigIntLiteral(node: Node): node is BigIntLiteral;
     function isStringLiteral(node: Node): node is StringLiteral;
@@ -12224,7 +12224,7 @@ declare module "typescript" {
     function isJSDocImplementsTag(node: Node): node is JSDocImplementsTag;
     function isSyntaxList(n: Node): n is SyntaxList;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function createEmptyExports(factory: NodeFactory): ExportDeclaration;
     function createMemberAccessForPropertyName(factory: NodeFactory, target: Expression, memberName: PropertyName, location?: TextRange): MemberExpression;
     function createJsxFactoryExpression(factory: NodeFactory, jsxFactoryEntity: EntityName | undefined, reactNamespace: string, parent: JsxOpeningLikeElement | JsxOpeningFragment): Expression;
@@ -12421,12 +12421,12 @@ declare module "typescript" {
      */
     function createAccessorPropertySetRedirector(factory: NodeFactory, node: PropertyDeclaration, modifiers: ModifiersArray | undefined, name: PropertyName): SetAccessorDeclaration;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function setTextRange<T extends TextRange>(range: T, location: TextRange | undefined): T;
     function canHaveModifiers(node: Node): node is HasModifiers;
     function canHaveDecorators(node: Node): node is HasDecorators;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * NOTE: You should not use this, it is only exported to support `createNode` in `~/src/deprecatedCompat/deprecations.ts`.
      */
@@ -12517,7 +12517,7 @@ declare module "typescript" {
     /** @internal */
     function tagNamesAreEquivalent(lhs: JsxTagNameExpression, rhs: JsxTagNameExpression): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export const compileOnSaveCommandLineOption: CommandLineOption;
     export const inverseJsxOptionMap: ESMap<string, string>;
     /**
@@ -12759,7 +12759,7 @@ declare module "typescript" {
     export function convertCompilerOptionsForTelemetry(opts: CompilerOptions): CompilerOptions;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export function trace(host: ModuleResolutionHost, message: DiagnosticMessage, ...args: any[]): void;
     export function isTraceEnabled(compilerOptions: CompilerOptions, host: ModuleResolutionHost): boolean;
     interface ModuleResolutionState {
@@ -12955,7 +12955,7 @@ declare module "typescript" {
     export function loadModuleFromGlobalCache(moduleName: string, projectName: string | undefined, compilerOptions: CompilerOptions, host: ModuleResolutionHost, globalCache: string, packageJsonInfoCache: PackageJsonInfoCache): ResolvedModuleWithFailedLookupLocations;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum ModuleInstanceState {
         NonInstantiated = 0,
         Instantiated = 1,
@@ -12965,10 +12965,10 @@ declare module "typescript" {
     function bindSourceFile(file: SourceFile, options: CompilerOptions): void;
     function isExportsOrModuleExportsOrAlias(sourceFile: SourceFile, node: Expression): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function createGetSymbolWalker(getRestTypeOfSignature: (sig: Signature) => Type, getTypePredicateOfSignature: (sig: Signature) => TypePredicate | undefined, getReturnTypeOfSignature: (sig: Signature) => Type, getBaseTypes: (type: Type) => Type[], resolveStructuredTypeMembers: (type: ObjectType) => ResolvedType, getTypeOfSymbol: (sym: Symbol) => Type, getResolvedSymbol: (node: Node) => Symbol, getConstraintOfTypeParameter: (typeParameter: TypeParameter) => Type | undefined, getFirstIdentifier: (node: EntityNameOrEntityNameExpression) => Identifier, getTypeArguments: (type: TypeReference) => readonly Type[]): (accept?: (symbol: Symbol) => boolean) => SymbolWalker;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum TypeFacts {
         None = 0,
         TypeofEQString = 1,
@@ -13071,7 +13071,7 @@ declare module "typescript" {
     function signatureHasRestParameter(s: Signature): boolean;
     function signatureHasLiteralTypes(s: Signature): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Visits a Node using the supplied visitor, possibly returning a new Node in its place.
      *
@@ -13169,7 +13169,7 @@ declare module "typescript" {
     function visitEachChild<T extends Node>(node: T | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: typeof visitNodes, tokenVisitor?: Visitor): T | undefined;
     function visitEachChild<T extends Node>(node: T | undefined, visitor: Visitor, context: TransformationContext, nodesVisitor?: NodesVisitor, tokenVisitor?: Visitor, nodeVisitor?: NodeVisitor): T | undefined;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface SourceMapGeneratorOptions {
         extendedDiagnostics?: boolean;
     }
@@ -13209,7 +13209,7 @@ declare module "typescript" {
     function createDocumentPositionMapper(host: DocumentPositionMapperHost, map: RawSourceMap, mapPath: string): DocumentPositionMapper;
     const identitySourceMapConsumer: DocumentPositionMapper;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function getOriginalNodeId(node: Node): number;
     interface ExternalModuleInfo {
         externalImports: (ImportDeclaration | ImportEqualsDeclaration | ExportDeclaration)[];
@@ -13287,7 +13287,7 @@ declare module "typescript" {
      */
     function getAllDecoratorsOfClassElement(member: ClassElement, parent: ClassLikeDeclaration): AllDecorators | undefined;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum FlattenLevel {
         All = 0,
         ObjectRest = 1
@@ -13317,17 +13317,17 @@ declare module "typescript" {
      */
     function flattenDestructuringBinding(node: VariableDeclaration | ParameterDeclaration, visitor: (node: Node) => VisitResult<Node>, context: TransformationContext, level: FlattenLevel, rval?: Expression, hoistTempVariables?: boolean, skipInitializer?: boolean): VariableDeclaration[];
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum ProcessLevel {
         LiftRestriction = 0,
         All = 1
     }
     function processTaggedTemplateExpression(context: TransformationContext, node: TaggedTemplateExpression, visitor: Visitor, currentSourceFile: SourceFile, recordTaggedTemplateString: (temp: Identifier) => void, level: ProcessLevel): CallExpression | TaggedTemplateExpression;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformTypeScript(context: TransformationContext): (node: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum PrivateIdentifierKind {
         Field = "f",
         Method = "m",
@@ -13342,7 +13342,7 @@ declare module "typescript" {
      */
     function transformClassFields(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     type SerializedEntityName = Identifier | PropertyAccessEntityNameExpression;
     type SerializedTypeNode = SerializedEntityName | ConditionalExpression | VoidExpression;
     export interface RuntimeTypeSerializerContext {
@@ -13390,39 +13390,39 @@ declare module "typescript" {
     export function createRuntimeTypeSerializer(context: TransformationContext): RuntimeTypeSerializer;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformLegacyDecorators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2017(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
     /** Creates a variable named `_super` with accessor properties for the given property names. */
     function createSuperAccessVariableStatement(factory: NodeFactory, resolver: EmitResolver, node: FunctionLikeDeclaration, names: Set<__String>): VariableStatement;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2018(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2019(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2020(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2021(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformESNext(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformJsx(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2016(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformES2015(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Transforms ES5 syntax into ES3 syntax.
      *
@@ -13430,22 +13430,22 @@ declare module "typescript" {
      */
     function transformES5(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformGenerators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformSystemModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformECMAScriptModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function transformNodeModule(context: TransformationContext): (node: SourceFile | Bundle) => SourceFile | Bundle;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     type GetSymbolAccessibilityDiagnostic = (symbolAccessibilityResult: SymbolAccessibilityResult) => (SymbolAccessibilityDiagnostic | undefined);
     interface SymbolAccessibilityDiagnostic {
         errorNode: Node;
@@ -13457,7 +13457,7 @@ declare module "typescript" {
     function createGetSymbolAccessibilityDiagnosticForNodeName(node: DeclarationDiagnosticProducing): (symbolAccessibilityResult: SymbolAccessibilityResult) => SymbolAccessibilityDiagnostic | undefined;
     function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationDiagnosticProducing): GetSymbolAccessibilityDiagnostic;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function getDeclarationDiagnostics(host: EmitHost, resolver: EmitResolver, file: SourceFile | undefined): DiagnosticWithLocation[] | undefined;
     function isInternalDeclaration(node: Node, currentSourceFile: SourceFile): boolean | 0 | undefined;
     /**
@@ -13472,7 +13472,7 @@ declare module "typescript" {
         (node: SourceFile | Bundle): SourceFile | Bundle;
     };
 }
-declare module "typescript" {
+declare module "typescript-full" {
     const noTransformers: EmitTransformers;
     function getTransformers(compilerOptions: CompilerOptions, customTransformers?: CustomTransformers, emitOnlyDtsFiles?: boolean): EmitTransformers;
     function noEmitSubstitution(_hint: EmitHint, node: Node): Node;
@@ -13490,7 +13490,7 @@ declare module "typescript" {
     function transformNodes<T extends Node>(resolver: EmitResolver | undefined, host: EmitHost | undefined, factory: NodeFactory, options: CompilerOptions, nodes: readonly T[], transformers: readonly TransformerFactory<T>[], allowDtsFiles: boolean): TransformationResult<T>;
     const nullTransformationContext: TransformationContext;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function isBuildInfoFile(file: string): boolean;
     /**
      * Iterates over the source files that are expected to have an emit output.
@@ -13529,7 +13529,7 @@ declare module "typescript" {
     function emitUsingBuildInfo(config: ParsedCommandLine, host: EmitUsingBuildInfoHost, getCommandLine: (ref: ProjectReference) => ParsedCommandLine | undefined, customTransformers?: CustomTransformers): EmitUsingBuildInfoResult;
     function createPrinter(printerOptions?: PrinterOptions, handlers?: PrintHandlers): Printer;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Partial interface of the System thats needed to support the caching of directory structure
      */
@@ -13639,7 +13639,7 @@ declare module "typescript" {
         watcher: FileWatcher;
     }>(objWithWatcher: T): void;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export function findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName?: string): string | undefined;
     export function resolveTripleslashReference(moduleName: string, containingFile: string): string;
     export function computeCommonSourceDirectoryOfFilenames(fileNames: readonly string[], currentDirectory: string, getCanonicalFileName: GetCanonicalFileName): string;
@@ -13819,7 +13819,7 @@ declare module "typescript" {
     export function getModuleNameStringLiteralAt({ imports, moduleAugmentations }: SourceFileImportsList, index: number): StringLiteralLike;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface EmitOutput {
         outputFiles: OutputFile[];
         emitSkipped: boolean;
@@ -13832,7 +13832,7 @@ declare module "typescript" {
         buildInfo?: BuildInfo;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function getFileEmitOutput(program: Program, sourceFile: SourceFile, emitOnlyDtsFiles: boolean, cancellationToken?: CancellationToken, customTransformers?: CustomTransformers, forceDtsEmit?: boolean): EmitOutput;
     interface BuilderState {
         /**
@@ -13944,7 +13944,7 @@ declare module "typescript" {
         function getAllFilesExcludingDefaultLibraryFile(state: BuilderState, programOfThisState: Program, firstSourceFile: SourceFile | undefined): readonly SourceFile[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface ReusableDiagnostic extends ReusableDiagnosticRelatedInformation {
         /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */
         reportsUnnecessary?: {};
@@ -14155,7 +14155,7 @@ declare module "typescript" {
         compilerOptions: CompilerOptions;
     }, configFileParsingDiagnostics: readonly Diagnostic[]): BuilderProgram;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     type AffectedFileResult<T> = {
         result: T;
         affected: SourceFile | Program;
@@ -14310,7 +14310,7 @@ declare module "typescript" {
     function createAbstractBuilder(newProgram: Program, host: BuilderProgramHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[]): BuilderProgram;
     function createAbstractBuilder(rootNames: readonly string[] | undefined, options: CompilerOptions | undefined, host?: CompilerHost, oldProgram?: BuilderProgram, configFileParsingDiagnostics?: readonly Diagnostic[], projectReferences?: readonly ProjectReference[]): BuilderProgram;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** This is the cache of module/typedirectives resolution that can be retained across program */
     export interface ResolutionCache {
         startRecordingFilesWithChangedResolutions(): void;
@@ -14372,7 +14372,7 @@ declare module "typescript" {
     export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootDirForResolution: string | undefined, logChangesWhenResolvingModule: boolean): ResolutionCache;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace moduleSpecifiers {
         function updateModuleSpecifier(compilerOptions: CompilerOptions, importingSourceFile: SourceFile, importingSourceFileName: Path, toFileName: string, host: ModuleSpecifierResolutionHost, oldImportSpecifier: string, options?: ModuleSpecifierOptions): string | undefined;
         function getModuleSpecifier(compilerOptions: CompilerOptions, importingSourceFile: SourceFile, importingSourceFileName: Path, toFileName: string, host: ModuleSpecifierResolutionHost, options?: ModuleSpecifierOptions): string;
@@ -14389,7 +14389,7 @@ declare module "typescript" {
         function tryGetJSExtensionForFile(fileName: string, options: CompilerOptions): Extension | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Create a function that reports error by writing to the system and handles the formatting of the diagnostic
      */
@@ -14507,7 +14507,7 @@ declare module "typescript" {
     export function performIncrementalCompilation(input: IncrementalCompilationOptions): ExitStatus.Success | ExitStatus.DiagnosticsPresent_OutputsSkipped | ExitStatus.DiagnosticsPresent_OutputsGenerated;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface ReadBuildProgramHost {
         useCaseSensitiveFileNames(): boolean;
         getCurrentDirectory(): string;
@@ -14670,7 +14670,7 @@ declare module "typescript" {
      */
     function createWatchProgram<T extends BuilderProgram>(host: WatchCompilerHostOfConfigFile<T>): WatchOfConfigFile<T>;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum UpToDateStatusType {
         Unbuildable = 0,
         UpToDate = 1,
@@ -14806,7 +14806,7 @@ declare module "typescript" {
     }
     function resolveConfigFileProjectName(project: string): ResolvedConfigFileName;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface BuildOptions {
         dry?: boolean;
         force?: boolean;
@@ -14931,7 +14931,7 @@ declare module "typescript" {
     }
     type InvalidatedProject<T extends BuilderProgram> = UpdateOutputFileStampsProject | BuildInvalidedProject<T> | UpdateBundleProject<T>;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace server {
         type ActionSet = "action::set";
         type ActionInvalidate = "action::invalidate";
@@ -14969,7 +14969,7 @@ declare module "typescript" {
         function nowString(): string;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace server {
         interface TypingInstallerResponse {
             readonly kind: ActionSet | ActionInvalidate | EventTypesRegistry | ActionPackageInstalled | EventBeginInstallTypes | EventEndInstallTypes | EventInitializationFailed;
@@ -15051,7 +15051,7 @@ declare module "typescript" {
         type TypingInstallerResponseUnion = SetTypings | InvalidateCachedTypings | TypesRegistryResponse | PackageInstalledResponse | InstallTypes | InitializationFailedResponse;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace JsTyping {
         interface TypingResolutionHost {
             directoryExists(path: string): boolean;
@@ -15109,7 +15109,7 @@ declare module "typescript" {
         function renderPackageNameValidationFailure(result: PackageNameValidationResult, typing: string): string;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface Node {
         getSourceFile(): SourceFile;
         getChildCount(sourceFile?: SourceFile): number;
@@ -16446,7 +16446,7 @@ interface PromiseConstructor {
     reject(reason: any): Promise<never>;
     all<T>(values: (T | PromiseLike<T>)[]): Promise<T[]>;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     const scanner: Scanner;
     enum SemanticMeaning {
         None = 0,
@@ -16825,7 +16825,7 @@ declare module "typescript" {
     function jsxModeNeedsExplicitImport(jsx: JsxEmit | undefined): boolean;
     function isSourceFileFromLibrary(program: Program, node: SourceFile): boolean;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum ImportKind {
         Named = 0,
         Default = 1,
@@ -16875,7 +16875,7 @@ declare module "typescript" {
         exportKind: ExportKind;
     } | undefined;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** The classifier is used for syntactic highlighting in editors via the TSServer */
     function createClassifier(): Classifier;
     function getSemanticClassifications(typeChecker: TypeChecker, cancellationToken: CancellationToken, sourceFile: SourceFile, classifiableNames: ReadonlySet<__String>, span: TextSpan): ClassifiedSpan[];
@@ -16883,7 +16883,7 @@ declare module "typescript" {
     function getSyntacticClassifications(cancellationToken: CancellationToken, sourceFile: SourceFile, span: TextSpan): ClassifiedSpan[];
     function getEncodedSyntacticClassifications(cancellationToken: CancellationToken, sourceFile: SourceFile, span: TextSpan): Classifications;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace classifier.v2020 {
         enum TokenEncodingConsts {
             typeOffset = 8,
@@ -16916,13 +16916,13 @@ declare module "typescript" {
         function getEncodedSemanticClassifications(program: Program, cancellationToken: CancellationToken, sourceFile: SourceFile, span: TextSpan): Classifications;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace Completions.StringCompletions {
         function getStringLiteralCompletions(sourceFile: SourceFile, position: number, contextToken: Node | undefined, options: CompilerOptions, host: LanguageServiceHost, program: Program, log: Log, preferences: UserPreferences): CompletionInfo | undefined;
         function getStringLiteralCompletionDetails(name: string, sourceFile: SourceFile, position: number, contextToken: Node | undefined, checker: TypeChecker, options: CompilerOptions, host: LanguageServiceHost, cancellationToken: CancellationToken, preferences: UserPreferences): CompletionEntryDetails | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace Completions {
         export const moduleSpecifierResolutionLimit = 100;
         export const moduleSpecifierResolutionCacheAttemptLimit = 1000;
@@ -17026,7 +17026,7 @@ declare module "typescript" {
         export {};
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface DocumentHighlights {
         fileName: string;
         highlightSpans: HighlightSpan[];
@@ -17035,7 +17035,7 @@ declare module "typescript" {
         function getDocumentHighlights(program: Program, cancellationToken: CancellationToken, sourceFile: SourceFile, position: number, sourceFilesToSearch: readonly SourceFile[]): DocumentHighlights[] | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * The document registry represents a store of SourceFile objects that can be shared between
      * multiple LanguageService instances. A LanguageService instance holds on the SourceFile (AST)
@@ -17136,7 +17136,7 @@ declare module "typescript" {
     };
     function createDocumentRegistryInternal(useCaseSensitiveFileNames?: boolean, currentDirectory?: string, externalCache?: ExternalDocumentCache): DocumentRegistry;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace FindAllReferences {
         interface ImportsResult {
             /** For every import of the symbol, the location and local symbol for the import. */
@@ -17199,7 +17199,7 @@ declare module "typescript" {
         function getExportInfo(exportSymbol: Symbol, exportKind: ExportKind, checker: TypeChecker): ExportInfo | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace FindAllReferences {
         interface SymbolAndEntries {
             readonly definition: Definition | undefined;
@@ -17331,7 +17331,7 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace CallHierarchy {
         type NamedExpression = ClassExpression & {
             name: Identifier;
@@ -17367,14 +17367,14 @@ declare module "typescript" {
         function getOutgoingCalls(program: Program, declaration: CallHierarchyDeclaration): CallHierarchyOutgoingCall[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     export function getEditsForFileRename(program: Program, oldFileOrDirPath: string, newFileOrDirPath: string, host: LanguageServiceHost, formatContext: formatting.FormatContext, preferences: UserPreferences, sourceMapper: SourceMapper): readonly FileTextChanges[];
     /** If 'path' refers to an old directory, returns path in the new directory. */
     type PathUpdater = (path: string) => string | undefined;
     export function getPathUpdater(oldFileOrDirPath: string, newFileOrDirPath: string, getCanonicalFileName: GetCanonicalFileName, sourceMapper: SourceMapper | undefined): PathUpdater;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace GoToDefinition {
         function getDefinitionAtPosition(program: Program, sourceFile: SourceFile, position: number, searchOtherFilesOnly?: boolean, stopAtAlias?: boolean): readonly DefinitionInfo[] | undefined;
         function getReferenceAtPosition(sourceFile: SourceFile, position: number, program: Program): {
@@ -17390,7 +17390,7 @@ declare module "typescript" {
         function findReferenceInPosition(refs: readonly FileReference[], pos: number): FileReference | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace JsDoc {
         function getJsDocCommentsFromDeclarations(declarations: readonly Declaration[], checker?: TypeChecker): SymbolDisplayPart[];
         function getJsDocTagsFromDeclarations(declarations?: Declaration[], checker?: TypeChecker): JSDocTagInfo[];
@@ -17426,18 +17426,18 @@ declare module "typescript" {
         function getDocCommentTemplateAtPosition(newLine: string, sourceFile: SourceFile, position: number, options?: DocCommentTemplateOptions): TextInsertion | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace NavigateTo {
         function getNavigateToItems(sourceFiles: readonly SourceFile[], checker: TypeChecker, cancellationToken: CancellationToken, searchValue: string, maxResultCount: number | undefined, excludeDtsFiles: boolean): NavigateToItem[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace NavigationBar {
         function getNavigationBarItems(sourceFile: SourceFile, cancellationToken: CancellationToken): NavigationBarItem[];
         function getNavigationTree(sourceFile: SourceFile, cancellationToken: CancellationToken): NavigationTree;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace OrganizeImports {
         /**
          * Organize imports by:
@@ -17463,12 +17463,12 @@ declare module "typescript" {
         function compareImportsOrRequireStatements(s1: AnyImportOrRequireStatement, s2: AnyImportOrRequireStatement): Comparison;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace OutliningElementsCollector {
         function collectElements(sourceFile: SourceFile, cancellationToken: CancellationToken): OutliningSpan[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     enum PatternMatchKind {
         exact = 0,
         prefix = 1,
@@ -17488,21 +17488,21 @@ declare module "typescript" {
     function breakIntoCharacterSpans(identifier: string): TextSpan[];
     function breakIntoWordSpans(identifier: string): TextSpan[];
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function preProcessFile(sourceText: string, readImportFiles?: boolean, detectJavaScriptImports?: boolean): PreProcessedFileInfo;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace Rename {
         function getRenameInfo(program: Program, sourceFile: SourceFile, position: number, preferences: UserPreferences): RenameInfo;
         function nodeIsEligibleForRename(node: Node): boolean;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace SmartSelectionRange {
         function getSmartSelectionRange(pos: number, sourceFile: SourceFile): SelectionRange;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace SignatureHelp {
         function getSignatureHelpItems(program: Program, sourceFile: SourceFile, position: number, triggerReason: SignatureHelpTriggerReason | undefined, cancellationToken: CancellationToken): SignatureHelpItems | undefined;
         interface ArgumentInfoForCompletions {
@@ -17513,12 +17513,12 @@ declare module "typescript" {
         function getArgumentInfoForCompletions(node: Node, position: number, sourceFile: SourceFile): ArgumentInfoForCompletions | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace InlayHints {
         function provideInlayHints(context: InlayHintsContext): InlayHint[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface SourceMapper {
         toLineColumnOffset(fileName: string, position: number): LineAndCharacter;
         tryGetSourcePosition(info: DocumentPosition): DocumentPosition | undefined;
@@ -17543,7 +17543,7 @@ declare module "typescript" {
     type ReadMapFile = (mapFileName: string, mapFileNameFromDts: string | undefined) => string | undefined | DocumentPositionMapper | false;
     function getDocumentPositionMapper(host: DocumentPositionMapperHost, generatedFileName: string, generatedFileLineInfo: LineInfo, readMapFile: ReadMapFile): DocumentPositionMapper | undefined;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     function computeSuggestionDiagnostics(sourceFile: SourceFile, program: Program, cancellationToken: CancellationToken): DiagnosticWithLocation[];
     function returnsPromise(node: FunctionLikeDeclaration, checker: TypeChecker): boolean;
     function isReturnStatementWithFixablePromiseHandler(node: Node, checker: TypeChecker): node is ReturnStatement & {
@@ -17552,7 +17552,7 @@ declare module "typescript" {
     function isFixablePromiseHandler(node: Node, checker: TypeChecker): boolean;
     function canBeConvertedToAsync(node: Node): node is FunctionDeclaration | MethodDeclaration | FunctionExpression | ArrowFunction;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace SymbolDisplay {
         function getSymbolKind(typeChecker: TypeChecker, symbol: Symbol, location: Node): ScriptElementKind;
         function getSymbolModifiers(typeChecker: TypeChecker, symbol: Symbol): string;
@@ -17565,7 +17565,7 @@ declare module "typescript" {
         function getSymbolDisplayPartsDocumentationAndSymbolKind(typeChecker: TypeChecker, symbol: Symbol, sourceFile: SourceFile, enclosingDeclaration: Node | undefined, location: Node, semanticMeaning?: SemanticMeaning, alias?: Symbol): SymbolDisplayPartsDocumentationAndSymbolKind;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface TranspileOptions {
         compilerOptions?: CompilerOptions;
         fileName?: string;
@@ -17584,7 +17584,7 @@ declare module "typescript" {
     /** JS users may pass in string values for enum compiler options (such as ModuleKind), so convert. */
     function fixupCompilerOptions(options: CompilerOptions, diagnostics: Diagnostic[]): CompilerOptions;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         enum FormattingRequestKind {
             FormatDocument = 0,
@@ -17620,7 +17620,7 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         interface FormattingScanner {
             advance(): void;
@@ -17637,7 +17637,7 @@ declare module "typescript" {
         function getFormattingScanner<T>(text: string, languageVariant: LanguageVariant, startPos: number, endPos: number, cb: (scanner: FormattingScanner) => T): T;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         interface Rule {
             readonly debugName: string;
@@ -17669,7 +17669,7 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         interface RuleSpec {
             readonly leftTokenRange: TokenRange;
@@ -17679,7 +17679,7 @@ declare module "typescript" {
         function getAllRules(): RuleSpec[];
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         function getFormatContext(options: FormatCodeSettings, host: FormattingHost): FormatContext;
         type RulesMap = (context: FormattingContext) => readonly Rule[] | undefined;
@@ -17693,7 +17693,7 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         interface FormatContext {
             readonly options: FormatCodeSettings;
@@ -17724,7 +17724,7 @@ declare module "typescript" {
         function getIndentationString(indentation: number, options: EditorSettings): string;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace formatting {
         namespace SmartIndenter {
             /**
@@ -17771,7 +17771,7 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace textChanges {
         export interface ConfigurableStart {
             leadingTriviaOption?: LeadingTriviaOption;
@@ -17959,7 +17959,7 @@ declare module "typescript" {
         export {};
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
         function createCodeFixActionWithoutFixAll(fixName: string, changes: FileTextChanges[], description: DiagnosticAndArguments): CodeFixAction;
         function createCodeFixAction(fixName: string, changes: FileTextChanges[], description: DiagnosticAndArguments, fixId: {}, fixAllDescription: DiagnosticAndArguments, command?: CodeActionCommand): CodeFixAction;
@@ -17974,7 +17974,7 @@ declare module "typescript" {
         function eachDiagnostic(context: CodeFixAllContext, errorCodes: readonly number[], cb: (diag: DiagnosticWithLocation) => void): void;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
         /** @param name An unique code associated with each refactor. Does not have to be human-readable. */
         function registerRefactor(name: string, refactor: Refactor): void;
@@ -17982,81 +17982,81 @@ declare module "typescript" {
         function getEditsForRefactor(context: RefactorContext, refactorName: string, actionName: string): RefactorEditInfo | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
         type DeclarationWithType = FunctionLikeDeclaration | VariableDeclaration | PropertySignature | PropertyDeclaration;
         function parameterShouldGetTypeFromJSDoc(node: Node): node is DeclarationWithType;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
         const importFixName = "import";
         /**
@@ -18094,143 +18094,143 @@ declare module "typescript" {
         function moduleSpecifierToValidIdentifier(moduleSpecifier: string, target: ScriptTarget | undefined, forceCapitalize?: boolean): string;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
         /**
          * Finds members of the resolved type that are missing in the class pointed to by class decl
@@ -18292,7 +18292,7 @@ declare module "typescript" {
         export {};
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
         type AcceptedDeclaration = ParameterPropertyDeclaration | PropertyDeclaration | PropertyAssignment;
         type AcceptedNameType = Identifier | StringLiteral;
@@ -18316,80 +18316,80 @@ declare module "typescript" {
         export {};
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace codefix {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
         function doChangeNamedToNamespaceOrDefault(sourceFile: SourceFile, program: Program, changes: textChanges.ChangeTracker, toConvert: NamedImports, shouldUseDefault?: boolean): void;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.convertToOptionalChainExpression {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.addOrRemoveBracesToArrowFunction {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.extractSymbol {
         /**
          * Compute the associated code actions
@@ -18468,15 +18468,15 @@ declare module "typescript" {
         }
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.generateGetAccessorAndSetAccessor {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
         /**
          * Returned by refactor functions when some error message needs to be surfaced to users.
@@ -18495,31 +18495,31 @@ declare module "typescript" {
         function refactorKindBeginsWith(known: string, requested: string | undefined): boolean;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.addOrRemoveBracesToArrowFunction {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.convertParamsToDestructuredObject {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.convertStringOrTemplateLiteral {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.convertArrowFunctionOrFunctionExpression {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace refactor.inferFunctionReturnType {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** The version of the language service API */
     const servicesVersion = "0.8";
     interface DisplayPartsSymbolWriter extends EmitTextWriter {
@@ -18561,7 +18561,7 @@ declare module "typescript" {
      */
     function getDefaultLibFilePath(options: CompilerOptions): string;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     namespace BreakpointResolver {
         /**
          * Get the breakpoint span in given sourceFile
@@ -18569,7 +18569,7 @@ declare module "typescript" {
         function spanInSourceFileAtLocation(sourceFile: SourceFile, position: number): TextSpan | undefined;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * Transform one or more nodes using the supplied transformers.
      * @param source A single `Node` or an array of `Node` objects.
@@ -18578,7 +18578,7 @@ declare module "typescript" {
      */
     function transform<T extends Node>(source: T | T[], transformers: TransformerFactory<T>[], compilerOptions?: CompilerOptions): TransformationResult<T>;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface ScriptSnapshotShim {
         /** Gets a portion of the script snapshot specified by [start, end). */
         getText(start: number, end: number): string;
@@ -18856,7 +18856,7 @@ declare module "typescript" {
         unregisterShim(shim: Shim): void;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** Defines a list of overloads by ordinal */
     type OverloadDefinitions = {
         readonly [P in number]: (...args: any[]) => any;
@@ -18894,7 +18894,7 @@ declare module "typescript" {
     export function buildOverload(name: string): OverloadBuilder;
     export {};
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** @deprecated Use `factory.createNodeArray` or the factory supplied by your transformation context instead. */
     const createNodeArray: <T extends Node>(elements?: readonly T[] | undefined, hasTrailingComma?: boolean | undefined) => NodeArray<T>;
     /** @deprecated Use `factory.createNumericLiteral` or the factory supplied by your transformation context instead. */
@@ -19754,11 +19754,11 @@ declare module "typescript" {
      */
     const getMutableClone: <T extends Node>(node: T) => T;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /** @deprecated Use `isTypeAssertionExpression` instead. */
     const isTypeAssertion: (node: Node) => node is TypeAssertion;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * @deprecated Use `ts.ReadonlyESMap<K, V>` instead.
      */
@@ -19770,13 +19770,13 @@ declare module "typescript" {
     interface Map<T> extends ESMap<string, T> {
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     /**
      * @deprecated Use `isMemberName` instead.
      */
     const isIdentifierOrPrivateIdentifier: (node: Node) => node is MemberName;
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface NodeFactory {
         /** @deprecated Use the overload that accepts 'modifiers' */
         createConstructorTypeNode(typeParameters: readonly TypeParameterDeclaration[] | undefined, parameters: readonly ParameterDeclaration[], type: TypeNode): ConstructorTypeNode;
@@ -19784,7 +19784,7 @@ declare module "typescript" {
         updateConstructorTypeNode(node: ConstructorTypeNode, typeParameters: NodeArray<TypeParameterDeclaration> | undefined, parameters: NodeArray<ParameterDeclaration>, type: TypeNode): ConstructorTypeNode;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface NodeFactory {
         createImportTypeNode(argument: TypeNode, assertions?: ImportTypeAssertionContainer, qualifier?: EntityName, typeArguments?: readonly TypeNode[], isTypeOf?: boolean): ImportTypeNode;
         /** @deprecated Use the overload that accepts 'assertions' */
@@ -19793,7 +19793,7 @@ declare module "typescript" {
         updateImportTypeNode(node: ImportTypeNode, argument: TypeNode, qualifier: EntityName | undefined, typeArguments: readonly TypeNode[] | undefined, isTypeOf?: boolean): ImportTypeNode;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface NodeFactory {
         /** @deprecated Use the overload that accepts 'modifiers' */
         createTypeParameterDeclaration(name: string | Identifier, constraint?: TypeNode, defaultType?: TypeNode): TypeParameterDeclaration;
@@ -19801,7 +19801,7 @@ declare module "typescript" {
         updateTypeParameterDeclaration(node: TypeParameterDeclaration, name: Identifier, constraint: TypeNode | undefined, defaultType: TypeNode | undefined): TypeParameterDeclaration;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
     interface Node {
         /**
          * @deprecated `decorators` has been removed from `Node` and merged with `modifiers` on the `Node` subtypes that support them.
@@ -20003,5 +20003,5 @@ declare module "typescript" {
         updateExportDeclaration(node: ExportDeclaration, decorators: readonly Decorator[] | undefined, modifiers: readonly Modifier[] | undefined, isTypeOnly: boolean, exportClause: NamedExportBindings | undefined, moduleSpecifier: Expression | undefined, assertClause: AssertClause | undefined): ExportDeclaration;
     }
 }
-declare module "typescript" {
+declare module "typescript-full" {
 }
